generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id                    String         @id @default(uuid())
  email                 String         @unique
  password              String?
  role                  Role
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  avatarUrl             String?
  fullName              String?
  phoneNumber           String?
  refreshToken          String?
  address               String?
  verificationToken     String?
  verified              Boolean        @default(false)

  clientProfile         ClientProfile?
  freelancerProfile     FreelancerProfile?

  receivedMessages      Message[]      @relation("MessageRecipient")
  sentMessages          Message[]      @relation("MessageSender")
  reviewsGiven          Review[]       @relation("Reviewer")
  reviewsReceived       Review[]       @relation("Reviewee")
  notifications         Notification[]
}

model ClientProfile {
  id          String     @id @default(uuid())
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id])
  companyName String?
  website     String?
  industry    String?
  
  jobs        Job[]      @relation("ClientJobs")
  contracts   Contract[] @relation("ClientContracts")
}

model FreelancerProfile {
  id              String        @id @default(uuid())
  userId          String        @unique
  user            User          @relation(fields: [userId], references: [id])
  hourlyRate      Float?
  title           String?
  available       Boolean       @default(true)
  
  proposals       Proposal[]    @relation("FreelancerProposals")
  contracts       Contract[]    @relation("FreelancerContracts")
  skills          UserSkill[]   @relation("FreelancerSkills")
  savedJobs       UserSavedJob[] @relation("FreelancerSavedJobs")
}

model Job {
  id           String         @id @default(uuid())
  clientId     String
  title        String
  description  String
  category     String
  budget       Float
  type         JobType
  createdAt    DateTime       @default(now())
  contracts    Contract[]
  client       ClientProfile  @relation("ClientJobs", fields: [clientId], references: [userId])
  proposals    Proposal[]
  skills       JobSkill[]
  savedByUsers UserSavedJob[] @relation("SavedJobs")
}

model UserSavedJob {
  id        String            @id @default(uuid())
  userId    String
  jobId     String
  createdAt DateTime          @default(now())
  job       Job               @relation("SavedJobs", fields: [jobId], references: [id])
  freelancer FreelancerProfile @relation("FreelancerSavedJobs", fields: [userId], references: [userId])

  @@unique([userId, jobId])
}

model Skill {
  id        String   @id @default(uuid())
  name      String      @unique
  category  String?
  users     UserSkill[]
  jobs      JobSkill[]
}

model UserSkill {
  userId      String
  skillId     String
  proficiency Int?
  freelancer  FreelancerProfile @relation("FreelancerSkills", fields: [userId], references: [userId])
  skill       Skill             @relation(fields: [skillId], references: [id])

  @@id([userId, skillId])
}

model JobSkill {
  jobId    String
  skillId  String
  job      Job   @relation(fields: [jobId], references: [id])
  skill    Skill @relation(fields: [skillId], references: [id])

  @@id([jobId, skillId])
}

model Proposal {
  id           String            @id @default(uuid())
  freelancerId String
  jobId        String
  coverLetter  String?
  hourlyRate   Float
  status       ProposalStatus
  createdAt    DateTime          @default(now())
  freelancer   FreelancerProfile @relation("FreelancerProposals", fields: [freelancerId], references: [userId])
  job          Job               @relation(fields: [jobId], references: [id])
}

model Contract {
  id           String            @id @default(uuid())
  jobId        String
  clientId     String
  freelancerId String
  status       ContractStatus
  startedAt    DateTime
  completedAt  DateTime?
  client       ClientProfile     @relation("ClientContracts", fields: [clientId], references: [userId])
  freelancer   FreelancerProfile @relation("FreelancerContracts", fields: [freelancerId], references: [userId])
  job          Job               @relation(fields: [jobId], references: [id])
  payments     Payment[]
  reviews      Review[]
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  content     String
  sentAt      DateTime @default(now())
  recipient   User     @relation("MessageRecipient", fields: [recipientId], references: [id])
  sender      User     @relation("MessageSender", fields: [senderId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id         String        @id @default(uuid())
  contractId String
  amount     Float
  currency   String        @default("USD")
  status     PaymentStatus
  method     PaymentMethod
  paidAt     DateTime?
  createdAt  DateTime      @default(now())
  contract   Contract      @relation(fields: [contractId], references: [id])
}

model Review {
  id            String        @id @default(uuid())
  rating        Int
  comment       String?
  createdAt     DateTime  @default(now())
  
  // Relationships
  contractId    String
  reviewerId    String
  revieweeId    String
  contract      Contract  @relation(fields: [contractId], references: [id])
  reviewer      User      @relation(fields: [reviewerId], references: [id], name: "Reviewer")
  reviewee      User      @relation(fields: [revieweeId], references: [id], name: "Reviewee")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  STRIPE
}

enum Role {
  CLIENT
  FREELANCER
}

enum JobType {
  FIXED
  HOURLY
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}
