datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CLIENT
  FREELANCER
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  fullName      String
  password      String
  address       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
  avatarUrl     String?
  phoneNumber   String?
  role          Role
  verificationToken String? @unique  
  verified       Boolean  @default(false)

  // Client-specific fields
  companyName    String?  @default("")
  companyWebsite String?  @default("")
  jobs               Job[]

  // Freelancer-specific fields
  title               String?
  hourlyRate          Decimal? @default(0.0)
  totalEarnings       Decimal? @default(0.0)
  completedJobs       Int      @default(0)
  inProgressJobs      Int      @default(0)
  hoursPerWeek        String?
  responseTime        String?
  openToContract      Boolean @default(false)
  education           String?

  // Relations
  workHistory        WorkHistory[]
  freelancerSkills   FreelancerSkill[]
  freelancerLanguages FreelancerLanguage[]
  verifications      Verification[]
  linkedAccounts     LinkedAccount[]
  proposals          Proposal[]

  contractAsFreelancer Contract[] @relation(name: "FreelancerContracts")

  contractAsClient Contract[] @relation(name: "ClientContracts")

  reviewsGiven        Review[] @relation("ClientReviews")

  review Review[] @relation(name: "FreelancerReviews")
}

model FreelancerSkill {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  skill     String
}

model FreelancerLanguage {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  language  String
}

model Verification {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  type      String
}

model LinkedAccount {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  platform  String
  url       String
}

model WorkHistory {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  jobTitle  String
  rating    Decimal @default(0.0)
  price     Decimal
  startDate DateTime
  endDate   DateTime?
  jobType   String
  feedback  String?
}




// job

model Job {
  id          String  @id @default(uuid())
  client      User    @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  budget      Decimal
  status      JobStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  proposals   Proposal[]
}

// Định nghĩa enum cho loại công việc
enum JobType {
  FIXED_PRICE
  HOURLY
}

// Định nghĩa enum cho mức độ kinh nghiệm
enum ExperienceLevel {
  ENTRY
  INTERMEDIATE
  EXPERT
}

// Định nghĩa enum cho trạng thái công việc
enum JobStatus {
  OPEN
  CLOSED
  HIRED
}

// contract
model Contract {
  id          String  @id @default(uuid())
  client      User    @relation(fields: [clientId], references: [id], name: "ClientContracts")
  freelancer  User    @relation(fields: [freelancerId], references: [id], name: "FreelancerContracts")
  clientId    String
  freelancerId String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  payment Payment[]

  milestone Milestone[]
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Payment {
  id          String  @id @default(uuid())
  contract    Contract @relation(fields: [contractId], references: [id])
  contractId  String
  amount      Decimal
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

// proposal 
model Proposal {
  id           String  @id @default(uuid())
  freelancer   User    @relation(fields: [userId], references: [id])
  userId       String
  job          Job     @relation(fields: [jobId], references: [id])
  jobId        String
  coverLetter  String
  bidAmount    Decimal
  status       ProposalStatus @default(PENDING)
  createdAt    DateTime @default(now())
}
enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// milestone
model Milestone {
  id          String          @id @default(uuid())
  contract    Contract        @relation(fields: [contract_id], references: [id])
  contract_id String
  description String          @db.Text
  amount      Float
  due_date    DateTime
  status      MilestoneStatus @default(PENDING) // PENDING, COMPLETED, CANCELLED
}

enum MilestoneStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// review
model Review {
  id          String  @id @default(uuid())
  reviewer    User    @relation(fields: [reviewerId], references: [id], name: "ClientReviews")
  reviewee    User    @relation(fields: [revieweeId], references: [id], name: "FreelancerReviews")
  reviewerId  String
  revieweeId  String
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
}

// message
// model Message {
//   id           String   @id @default(uuid())
//   sender      User     @relation(fields: [sender_id], references: [id], name: "sent_messages")
//   sender_id    String
//   receiver    User     @relation(fields: [receiver_id], references: [id], name: "received_messages") 
//   receiver_id  String
//   content     String   @db.Text
//   created_at  DateTime @default(now())
// }
