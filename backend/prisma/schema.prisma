generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id                    String         @id @default(uuid())
  email                 String         @unique
  password              String?
  role                  Role
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  avatarUrl             String?
  fullName              String?
  phoneNumber           String?
  refreshToken          String?
  address               String?
  timezone              String?
  verificationToken     String?
  verified              Boolean        @default(false)
  stripeCustomerId      String?
  stripeAccountId       String?
  paymentMethodInfo     PaymentMethod[]

  clientProfile         ClientProfile?
  freelancerProfile     FreelancerProfile?

  receivedMessages      Message[]      @relation("MessageRecipient")
  sentMessages          Message[]      @relation("MessageSender")
  reviewsGiven          Review[]       @relation("Reviewer")
  reviewsReceived       Review[]       @relation("Reviewee")
  notifications         Notification[]

  conversationsAsParticipant1 Conversation[] @relation("ConversationParticipant1")
  conversationsAsParticipant2 Conversation[] @relation("ConversationParticipant2")
}

model ClientProfile {
  id          String     @id @default(uuid())
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName String?
  website     String?
  industry    String?
  
  jobs        Job[]      @relation("ClientJobs")
  contracts   Contract[] @relation("ClientContracts")
}

model FreelancerProfile {
  id              String        @id @default(uuid())
  userId          String        @unique
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  hourlyRate      Float?
  title           String?
  overview        String?
  languages       Language[]    @relation("FreelancerLanguages")
  available       Availability  @default(LESS_THAN_30)
  education       Education[]   @relation("FreelancerEducation")
  proposals       Proposal[]    @relation("FreelancerProposals")
  contracts       Contract[]    @relation("FreelancerContracts")
  skills          UserSkill[]   @relation("FreelancerSkills")
  savedJobs       UserSavedJob[] @relation("FreelancerSavedJobs")
  workLogs        WorkLog[]     @relation("WorkLogFreelancer")
}

model Job {
  id           String         @id @default(uuid())
  clientId     String
  title        String
  description  String
  category     String @default("")
  jobType      JobType
  projectLength String
  hoursPerWeek  String
  experienceLevel String
  jobDuration     String
  numProposals      Int @default(0)
  hourlyRateMin     Float?
  hourlyRateMax     Float?
  fixedPrice     Float?
  contractToHire Boolean @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  contracts    Contract[]
  client       ClientProfile  @relation("ClientJobs", fields: [clientId], references: [id], onDelete: Cascade)
  proposals    Proposal[]
  skills       JobSkill[]
  savedByUsers UserSavedJob[] @relation("SavedJobs")

  conversations Conversation[]
}

model UserSavedJob {
  id        String            @id @default(uuid())
  userId    String
  jobId     String
  createdAt DateTime          @default(now())
  job       Job               @relation("SavedJobs", fields: [jobId], references: [id])
  freelancer FreelancerProfile @relation("FreelancerSavedJobs", fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, jobId])
}

model Education {
  id             String   @id @default(uuid())
  school         String
  startYear      Int?
  endYear        Int?
  degree         String?
  areaOfStudy    String?
  description    String?
  freelancerId   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  freelancer     FreelancerProfile @relation("FreelancerEducation", fields: [freelancerId], references: [userId])
}

model Language {
  id             String   @id @default(uuid())
  name           String
  proficiency    LanguageProficiency
  freelancerId   String
  
  freelancer     FreelancerProfile @relation("FreelancerLanguages", fields: [freelancerId], references: [userId], onDelete: Cascade)
}

model Category {
  id      String   @id @default(uuid())
  name    String
  skills  Skill[]
}

model Skill {
  id        String   @id @default(uuid())
  name      String      @unique
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  users     UserSkill[]
  jobs      JobSkill[]
}

model UserSkill {
  userId      String
  skillId     String
  proficiency Int?
  freelancer  FreelancerProfile @relation("FreelancerSkills", fields: [userId], references: [userId], onDelete: Cascade)
  skill       Skill             @relation(fields: [skillId], references: [id])

  @@id([userId, skillId])
}

model JobSkill {
  jobId    String
  skillId  String
  job      Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill    Skill @relation(fields: [skillId], references: [id])

  @@id([jobId, skillId])
}

model Proposal {
  id           String            @id @default(uuid())
  freelancerId String
  jobId        String
  coverLetter  String
  pricing      Float
  timeline     String
  attachment   String
  status       ProposalStatus
  createdAt    DateTime          @default(now())
  updatedAt    DateTime @updatedAt
  freelancer   FreelancerProfile @relation("FreelancerProposals", fields: [freelancerId], references: [userId], onDelete: Cascade)
  job          Job               @relation(fields: [jobId], references: [id])

  @@unique([jobId,freelancerId])
}

model Contract {
  id           String            @id @default(uuid())
  title        String
  description  String
  milestoneId  String?
  jobId        String
  clientId     String
  freelancerId String
  paymentMethodId String?
  status       ContractStatus
  contractType ContractType
  projectDuration String @default("")
  totalHours    Float?
  hourlyRate   Float?
  totalPrice   Float?

  client       ClientProfile     @relation("ClientContracts", fields: [clientId], references: [userId])
  freelancer   FreelancerProfile @relation("FreelancerContracts", fields: [freelancerId], references: [userId])
  job          Job               @relation(fields: [jobId], references: [id])
  milestones    Milestone[]       @relation("MilestoneContract")
  workLog      WorkLog[]           @relation("WorkLogContract")
  workSubmission WorkSubmission[] @relation("WorkSubmissionContract")
  payments     Payment[]  @relation("PaymentContract")
  reviews      Review[]   @relation("ReviewContract")

  startedAt    DateTime
  completedAt  DateTime?
  canceledAt   DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

   @@unique([jobId,freelancerId,clientId])
}

model Milestone {
  id           String    @id @default(uuid())
  contractId   String
  title        String
  description  String?
  amount       Float
  dueDate      DateTime?
  fileUrl     String @default("")
  fileName    String @default("")
  fileSize    Int @default(0)
  fileKey     String @default("")
  status       MilestoneStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  contract     Contract @relation("MilestoneContract",fields: [contractId], references: [id],onDelete: Cascade)
  workSubmission WorkSubmission[] @relation("WorkSubmissionMilestone")
}

model WorkLog {
  id          String   @id @default(uuid())
  freelancerId String
  contractId  String
  hours       Float
  description String?

  contract    Contract?  @relation("WorkLogContract",fields: [contractId], references: [id],onDelete: Cascade)
  freelancer  FreelancerProfile @relation("WorkLogFreelancer",fields: [freelancerId], references: [userId])
  loggedAt    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  endTime     DateTime?
  workSubmission WorkSubmission[] @relation("WorkSubmissionWorkLog")
}

model WorkSubmission {
  id          String   @id @default(uuid())
  contractId   String
  workLogId    String?
  milestoneId  String?
  title       String
  description String
  fileUrl     String
  fileName    String
  fileSize    Int
  fileKey     String
  status       SubmissionStatus @default(PENDING)
  reviewedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contract   Contract   @relation("WorkSubmissionContract", fields: [contractId], references: [id])
  workLog    WorkLog?   @relation("WorkSubmissionWorkLog", fields: [workLogId], references: [id], onDelete: Cascade)
  milestone  Milestone? @relation("WorkSubmissionMilestone", fields: [milestoneId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  content     String
  sentAt      DateTime @default(now())
  readAt      DateTime?
  deliveredAt DateTime?
  recipient   User     @relation("MessageRecipient", fields: [recipientId], references: [id])
  sender      User     @relation("MessageSender", fields: [senderId], references: [id])

  isRead      Boolean  @default(false)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Conversation {
  id        String   @id @default(uuid())

  jobId String
  job Job @relation(fields: [jobId], references: [id])

  participant1Id String
  participant2Id String
  participant1   User @relation("ConversationParticipant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2   User @relation("ConversationParticipant2", fields: [participant2Id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@unique([jobId, participant1Id, participant2Id])
  @@index([participant1Id])
  @@index([participant2Id])
  @@index([jobId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  content   String
  type      NotificationType
  itemId    String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                  String        @id @default(uuid())
  contractId          String
  amount              Float
  currency            String        @default("USD")
  status              PaymentStatus
  method              PaymentMethodType
  paymentIntentId     String?       @unique
  captureMethod       String?       @default("automatic")
  applicationFeeAmount Float?
  paidAt              DateTime?
  createdAt           DateTime      @default(now())
  contract            Contract      @relation(name: "PaymentContract", fields: [contractId], references: [id])
}

model PaymentMethod {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type           String 
  brand          String?
  last4          String?
  expMonth       Int?
  expYear        Int?
  stripeMethodId String  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Review {
  id            String        @id @default(uuid())
  rating        Int
  comment       String?
  createdAt     DateTime  @default(now())
  
  // Relationships
  contractId    String
  reviewerId    String
  revieweeId    String
  contract      Contract  @relation(name:"ReviewContract",fields: [contractId], references: [id])
  reviewer      User      @relation(fields: [reviewerId], references: [id], name: "Reviewer")
  reviewee      User      @relation(fields: [revieweeId], references: [id], name: "Reviewee")
}

enum Availability {
  MORE_THAN_30
  LESS_THAN_30
  AS_NEEDED
  NONE
}

enum LanguageProficiency {
  BASIC
  CONVERSATIONAL
  FLUENT
  NATIVE
}

enum PaymentStatus {
  PENDING  
  AUTHORIZED
  PAID
  FAILED
  CANCELED
  REFUNDED
  SUCCEEDED
}

enum PaymentMethodType {
  CARD
  BANK_TRANSFER
}

enum Role {
  CLIENT
  FREELANCER
}

enum JobType {
  FIXED_PRICE
  HOURLY
}
enum ContractType {
  FIXED_PRICE
  HOURLY
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  SUBMITTED
  COMPLETED
  CANCELED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ContractStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum NotificationType {
  APPLY_JOB
  CREATE_CONTRACT
  CONTRACT_COMPLETED
  CONTRACT_CANCELLED
  REJECT_PROPOSAL
  WORK_SUBMISSION
  APPROVE_WORK_SUBMISSION
  DECLINE_WORK_SUBMISSION
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  REJECTED
}