generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  name           String?
  email          String   @unique
  password       String?
  role           Role
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  profile        Profile?
  jobs           Job[]        @relation("ClientJobs")
  proposals      Proposal[]   @relation("FreelancerProposals")
  contractsAsClient   Contract[] @relation("ClientContracts")
  contractsAsFreelancer Contract[] @relation("FreelancerContracts")
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageRecipient")
  notifications  Notification[]
}

model Profile {
  id           String   @id @default(uuid())
  userId       String   @unique
  title        String?
  description  String?
  hourlyRate   Float?
  skills       String[]
  experience   String?
  location     String?
  user         User     @relation(fields: [userId], references: [id])
}

model Job {
  id           String   @id @default(uuid())
  clientId     String
  title        String
  description  String
  category     String
  budget       Float
  type         JobType
  contracts Contract[]
  createdAt    DateTime @default(now())

  client       User     @relation("ClientJobs", fields: [clientId], references: [id])
  proposals    Proposal[]
}

model Proposal {
  id           String   @id @default(uuid())
  freelancerId String
  jobId        String
  coverLetter  String?
  hourlyRate   Float
  status       ProposalStatus
  createdAt    DateTime @default(now())

  freelancer   User     @relation("FreelancerProposals", fields: [freelancerId], references: [id])
  job          Job      @relation(fields: [jobId], references: [id])
}

model Contract {
  id           String   @id @default(uuid())
  jobId        String
  clientId     String
  freelancerId String
  status       ContractStatus
  startedAt    DateTime
  completedAt  DateTime?
  payments Payment[]

  job          Job      @relation(fields: [jobId], references: [id])
  client       User     @relation("ClientContracts", fields: [clientId], references: [id])
  freelancer   User     @relation("FreelancerContracts", fields: [freelancerId], references: [id])
}

model Message {
  id           String   @id @default(uuid())
  senderId     String
  recipientId  String
  content      String
  sentAt       DateTime @default(now())

  sender       User     @relation("MessageSender", fields: [senderId], references: [id])
  recipient    User     @relation("MessageRecipient", fields: [recipientId], references: [id])
}

model Notification {
  id         String   @id @default(uuid())
  userId     String
  content    String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
}

model Payment {
  id             String   @id @default(uuid())
  contractId     String
  amount         Float
  currency       String   @default("USD")
  status         PaymentStatus
  method         PaymentMethod
  paidAt         DateTime?
  createdAt      DateTime @default(now())

  contract       Contract @relation(fields: [contractId], references: [id])
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  STRIPE
}


enum Role {
  CLIENT
  FREELANCER
}

enum JobType {
  FIXED
  HOURLY
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}
